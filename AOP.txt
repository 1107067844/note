AOP的概念
AOP即为切面编程。散布于应用中多出的功能被成为横切关注点。通常来说，这些横切关注点从该脸上是与应用的业务逻辑分离的。比如，声明式事物，日志，安全，缓存等等，都与业务逻辑无关，可以讲这些东西抽象成为模块，采用面向切面编程的方式，通过声明方式定义这些功能用于何处，通过预编译方式和运行期动态代理实现这些某快画横切关注点程序功能进行统一维护，从而将横切关注点与他们所影响的对象之前分离出来，实现解耦。

横切关注点可以被模块化为特殊的类，这些类被称为切面（aspect）.这样做有两个有点：
1.每个关注点都集中于一个地方，而不是分散在多处。
2.模块更简洁，因为他们只包含主要的关注点代码，而次要关注点的代码（日志，事务，安全等）都被转移到切面中。


AOP术语
切面类有自己要完成的工作，切面类的工作就成为通知。通知定义了切面是做什么一级何时使用。
spring切面定义了5中类型通知：
1.前置通知（before）：在目标方法被调用之前调用通知功能。
2.后置通知（After）:在目标方法完成之后调用通知，不会关心方法的输出是什么。
3.返回通知（After-returning）：在目标方法成功执行之后调用通知。
4.异常通知（After-throwing）:在目标方法抛出异常后调用通知。
5.环绕通知（Around）：通知报过了被通知的方法，在被通知的方法调用之前和之后执行自定义的行为

连接点
在我们的应用程序中可能有数以万计的时机可以应用通知，而这些时机就被成为连接点。
连接点在应用执行过程中能够插入切面的一个点。这个点可以使调用方法时，抛出异常时。切面代码可以利用这些点插入到应用的正常流程中，并添加新的行为。

切点
连接点谈的是一个飘渺的大范围，而切点是一个具体的位置，用于缩小切面所通知的连接点的范围。
切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称，或者使用正则表达式定义所匹配的类和方法名称来定义切点。

切面
切面是通知和切点的结合，同事和切点米娜共同定义了切面的全部内容。

织入
织入是把切面应用到目标对象并创建新的代理对象的过程。切面在制定的连接点被织入到目标对象中。
在目标对象的生命周期有多个点可以进行织入：
编译期：
 切面在目标类编译时被织入。需要特殊的编译器，是AspectJ的方式。
类加载期：
切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。Aspectj5支持这种方式。

运行期：
切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态创建一个代理对象。而这正式Spring AOP的织入切面的方式。

